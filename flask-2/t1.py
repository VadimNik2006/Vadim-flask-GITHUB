# Что нужно сделать
# С помощью команды ps можно посмотреть список запущенных процессов.
# С флагами aux эта команда выведет информацию обо всех процессах, запущенных в системе.
#
# Запустите эту команду и сохраните выданный результат в файл:
#
# $ ps aux > output_file.txt
#
# Столбец RSS показывает информацию о потребляемой памяти в байтах.
#
# Напишите функцию get_summary_rss,
# которая на вход принимает путь до файла с результатом выполнения команды ps aux,
# а возвращает суммарный объём потребляемой памяти в человекочитаемом формате. Это означает,
# что ответ надо перевести в байты, килобайты, мегабайты и так далее.
#
# Ответ нужно вывести в одной единице измерения:
#
# 780 Б → 780 Б;
# 7 168 Б → 7 Кб;
# 220 200 960 Б → 210 Мб;
# 2 147 483 648 Б → 2 Гб.
# Советы и рекомендации
# Для разбиения строки по столбцам можно воспользоваться функцией split без аргументов:
#
# columns = line.split()
#
# Так как первой строкой является заголовок, её можно отбросить при расчётах суммарного объёма потребляемой памяти.
# Это можно сделать, например, с помощью среза:
#
# lines = output_file.readlines()[1:]
#
#
# Используйте цикл, чтобы перевести байты в максимальную единицу измерения. Проверьте,
# что будет, если ввести слишком большое число.
#
#
# Что оценивается
# Результат выводится в человекочитаемом формате (B, KiB, MiB, …).
# Путь к файлу вынесен в отдельную переменную.
# Запуск функции происходит в блоке __main__.

from script_flask import app, run


def get_summary_rss():
    with open("output_file.txt", "w") as output_file:
        for line in output_file:
            columns = line.split()
            if columns == 'RSS':
                pass


@app.route('/hello_world')
def test_function():
    return "Привет, мир!"


# if __name__ == '__main__':
#     app.run(debug=True)
if __name__ == '__main__':
    run()
